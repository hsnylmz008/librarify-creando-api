parameters:
    app.api_token: '%env(resolve:APP_API_TOKEN)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Form/Model,Migrations,Model,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Security\TokenAuthenticator:
        arguments:
            $appApiToken: '%app.api_token%'

    App\Service\Utils\HttpClientInterface: '@App\Service\Utils\HttpClient'
    App\Service\Utils\WriteCsvInterface: '@App\Service\Utils\WriteCsv'

    admin.category:
        class: App\Admin\CategoryAdmin
        arguments: [~, App\Entity\Category, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Administador, label: "Categor√≠a" }
        public: true

    admin.book:
        class: App\Admin\BookAdmin
        arguments: [~, App\Entity\Book, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Administador, label: "Libro" }
        public: true

    admin.author:
        class: App\Admin\AuthorAdmin
        arguments: [~, App\Entity\Author, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Administador, label: "Autor" }
        public: true

    App\EventListener\JWTCreatedListener:
        arguments: ['@request_stack']
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_jwt_created,
                method: onJWTCreated
            }

    App\EventListener\JWTDecodedListener:
        arguments: ['@request_stack']
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_jwt_decoded,
                method: onJWTDecoded
            }

    App\EventListener\JWTAuthenticationSuccessListener:
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_authentication_success,
                method: onAuthenticationSuccessResponse,
                priority: -1000,
            }
    
    App\Service\Book\ExportInCsv:
        arguments:
            $projectFolder: '%kernel.project_dir%'